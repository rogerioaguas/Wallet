apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'


android {
    lintOptions {
        lintConfig file("lint.xml")
    }
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "com.example.brunocolombini.wallet"
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    //Dagger
    implementation 'com.google.dagger:dagger:2.13'
    implementation 'com.google.dagger:dagger-android:2.13'
    implementation 'com.google.dagger:dagger-android-support:2.13'
    implementation 'com.android.support:support-v4:26.1.0'
    kapt "com.google.dagger:dagger-compiler:2.13"
    kapt "com.google.dagger:dagger-android-processor:2.13"

    implementation 'android.arch.persistence.room:runtime:1.1.0-beta2'
    kapt "android.arch.persistence.room:compiler:1.1.0-beta2"
    implementation 'android.arch.persistence.room:rxjava2:1.1.0-beta2'

    implementation "io.reactivex.rxjava2:rxjava:2.1.7"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    testImplementation 'android.arch.persistence.room:testing:1.0.0'
    testImplementation 'org.mockito:mockito-core:2.8.47'
    testImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
jacoco {
    toolVersion = "0.7.6.201602180812"
}



task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/*_Impl*',
                      '**/**Module**',
                      '**/**Fragment**',
                      '**/DAO**',
                      '**/component**',
                      '**/aplication**',
                      '**/**_Factory**',
                      '**/**Activity**',
                      '**/WalletApplication*',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/data',
                      '**/TextWatcherCryptoInput**',
                      '**/**Adapter**',
                      '**/MarketType**',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*Module_*Factory.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/androidTest/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree], [kotlinDebugTree])

    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ])
}